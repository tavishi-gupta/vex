{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nvoid pre_auton(void) {\n  vexcodeInit():\n}\n\n//settings\ndouble kP = 0.0;\ndouble kI = 0.0;\ndouble kD = 0.0;\n\ndouble TkP = 0.0;\ndouble TkI = 0.0;\ndouble TkD = 0.0;\n\n//modified autonomous settings\nint desiredValue = 200;\nint desiredTurnValue = 0;\n\nint error; //value - desiredvalue or position\nint prevError = 0;\nint derivative; //error - preverror or speed\nint totalError = 0;\n\nint turnError; //value - desiredvalue or position\nint turnPrevError = 0;\nint turnDerivative; //error - preverror or speed\nint turnTotalError = 0;\n\nbool resetDriveSensors = false;\n\nbool enablePID = true;\n\nint drivePID(){\n  while(enablePID){\n\n    if (resetDriveSensors) {\n      resetDriveSensors = false;\n      leftMotor.setPosition(0,degrees);\n      rightMotor.setPosition(0,degrees);\n    }\n\n\n    int leftMotorPosition = leftMotor.position(degrees);\n    int righMotorPosition = leftMotor.position(degrees);\n    int averagePosition = (leftMotorPosition + rightMotorPosition)/2;\n\n    error = averagePosition - desiredValue; //potential\n    derivative = error - prevError; //derivative\n\n    totalError += error; //integral or opposite of derivative > converts position to absement \n\n    double lateralMotorPower = (error*kP + derivative*kD + totalError*kI);\n\n    //turn values\n    int turnDifference = leftMotorPosition - rightMotorPosition\n    \n\n    turnError = turnAveragePosition - turnDesiredValue; //potential\n    turnDerivative = turnError - turnPrevError; //derivative\n\n    turnTotalError += turnError; //integral or opposite of derivative > converts position to absement \n\n    double turnMotorPower = (turnError*TkP + turnDerivative*TkD + turnTotalError*TkI);\n\n    \n\n    leftMotor.spin(forward, lateralMotorPower + turnVoluts, voltageUnits::volt);\n    leftMotor.spin(forward, lateralMotorPower - turnVoluts, voltageUnits::volt);\n    \n    prevError = error;\n    vex::task::sleep(20);\n\n  }\n  return 1;\n}\n\nvoid autonomouse(void) {\n  vex::task hello(drivePID);\n\n  resetDriveSensors = true;\n  desiredValue = 300;\n  desiredTurnValue = 600;\n  vex::task::sleep(1000)\n\n  resetDriveSensors = true;\n  desiredValue = 300;\n  desiredTurnValue = 300;\n  \n\n}\n\nvoid usercontrol(void) {\n  enablePID = false;\n\n}","textLanguage":"cpp","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}